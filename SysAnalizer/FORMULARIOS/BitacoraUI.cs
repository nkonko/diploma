// <auto-generated/>
namespace UI
{
    using BE.Entidades;
    using BLL;
    using Microsoft.Reporting.WinForms;
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Linq;
    using System.Windows.Forms;
    using UI.Modelo;

    public partial class BitacoraUI : Form, IBitacoraUI
    {
        private readonly IUsuarioBLL usuarionBll;
        private readonly IBitacoraBLL bitacoraBLL;
        private readonly IModeloBitacora modeloBitacora;

        private IList<Usuario> usuarios { get; set; }

        public BitacoraUI(IModeloBitacora modeloBitacora, IBitacoraBLL bitacoraBLL)
        {
            InitializeComponent();
            usuarionBll = IoCContainer.Resolve<IUsuarioBLL>();
            this.modeloBitacora = modeloBitacora;
            this.bitacoraBLL = bitacoraBLL;
        }

        private void Bitacora_Load(object sender, EventArgs e)
        {
            FillCheckedList();
            this.rpv1.RefreshReport();
            this.rpv1.RefreshReport();
        }

        private void btn_volver_Click(object sender, EventArgs e)
        {
            Hide();
        }

        private void FillCheckedList()
        {
            usuarios = usuarionBll.Cargar();

            foreach (var usu in usuarios)
            {
                checkListUsuarios.Items.Add(usu.Email);
            }
        }

        private void btn_filtrar_Click(object sender, EventArgs e)
        {
            var fechaDesde = dateTimePicker1.Value;
            var fechaHasta = dateTimePicker2.Value;
            var usuariosSeleccionados = new List<Usuario>();
            var criticidadesSeleccionadas = new List<string>();

            for (int i = 0; i < checkListUsuarios.CheckedItems.Count; i++)
            {
                var usuarioToAdd = usuarionBll.Cargar().FirstOrDefault(u => u.Email == (string)checkListUsuarios.CheckedItems[i]);
                usuariosSeleccionados.Add(usuarioToAdd);
            }

            for (int i = 0; i < checkListCriticidad.CheckedItems.Count; i++)
            {
                criticidadesSeleccionadas.Add((string)checkListCriticidad.CheckedItems[i]);
            }

            var idUsuarios = usuariosSeleccionados.Select(u => u.UsuarioId).ToList();

            var listaBitacora = ListarBitacora(idUsuarios, criticidadesSeleccionadas, fechaDesde, fechaHasta);

            if (listaBitacora.Any())
            {
                modeloBitacora.ListadoBitacora = CrearDataTable(listaBitacora);
                //Cargamos info en el reporte
                rpv1.LocalReport.DataSources.Clear();
                rpv1.LocalReport.DataSources.Add(new ReportDataSource("DS_Bitacora", modeloBitacora.ListadoBitacora.Tables[0]));
                rpv1.LocalReport.Refresh();
                rpv1.RefreshReport();
            }
            else
            {
                //VER PORQUE NO LO LIMPIA CUANDO NO HAY DATOS
                //lo de abajo es temporal hasta encontrar una mejor solucion
                modeloBitacora.ListadoBitacora.Clear();
                rpv1.LocalReport.DataSources.Clear();
                rpv1.LocalReport.DataSources.Add(new ReportDataSource("Dataset1", modeloBitacora.ListadoBitacora.Tables[0]));
                rpv1.LocalReport.Refresh();
                rpv1.RefreshReport();
                //Alert.ShowAlterWithButtonAndIcon("MSJ004", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        public DataSet CrearDataTable(List<Bitacora> listaBitacora)
        {
            var table = new DataTable();
            var dsBitacora = new DataSet();
            table.Columns.Add("Fecha");
            table.Columns.Add("Usuario");
            table.Columns.Add("Funcionalidad");
            table.Columns.Add("Descripcion");
            table.Columns.Add("Criticidad");

            if (listaBitacora.Any())
            {
                foreach (var item in listaBitacora)
                {
                    var email = usuarios.FirstOrDefault(_ => _.UsuarioId == item.UsuarioId)?.Email;
                    DataRow row = table.NewRow();
                    row["Fecha"] = item.Fecha.Value.ToShortDateString();
                    row["Usuario"] = email;
                    row["Funcionalidad"] = item.Actividad;
                    row["Descripcion"] = item.InformacionAsociada;
                    row["Criticidad"] = item.Criticidad;
                    table.Rows.Add(row);
                }
                dsBitacora.Tables.Add(table);
            }

            return dsBitacora;
        }

        public List<Bitacora> ListarBitacora(List<int> idUsuarios, List<string> prueba, DateTime fechaDesde, DateTime fechaHasta)
        {
            var listaBitacora = bitacoraBLL.LeerBitacoraPorUsuarioCriticidadYFecha(idUsuarios, prueba, fechaDesde, fechaHasta);

            return listaBitacora;
        }
    }
}